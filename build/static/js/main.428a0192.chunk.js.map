{"version":3,"sources":["api/index.js","components/Cards/Cards.module.css","components/Cards/Cards.jsx","components/Charts/Charts.jsx","components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","components/News/News.module.css","App.module.css","components/News/News.jsx","components/Charts/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/corona.png"],"names":["url","fetchNews","a","getCookie","finalUrl","axios","get","articles","data","setCookie","saveNewsDataInCookie","getNewsDataFromCookie","newsData","savedArticles","i","JSON","parse","push","description","image","publishedAt","title","count","stringify","split","splice","join","fetchData","country","changeableUrl","confirmed","recovered","deaths","lastUpdate","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","countries","name","cookie_name","cookie_value","expires","Date","setTime","getTime","COOKIE_EXP_HOUR","toUTCString","document","cookie","dc","prefix","begin","indexOf","end","length","decodeURI","substring","module","exports","Cards","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","duration","value","separator","toDateString","Charts","useState","setDailyData","useEffect","fetchAPI","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","fetchCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","key","News","lazy","App","state","fetchedCountryData","setState","this","loadLazyScript","fetchedData","script","createElement","async","src","body","appendChild","CoronaImage","alt","fallback","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","useStyles","makeStyles","root","maxWidth","media","height","width","fetchedNewsData","setNewsData","fetchNewsAPI","classes","Newscontainer","centeralign","news","href","rel","newInlineBlock","newsblock","data-src"],"mappings":"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","file":"static/js/main.428a0192.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport Fs from 'fs';\r\nimport Path from 'path';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\nconst newUrl = 'https://gnews.io/api/v3/search';\r\nconst GNEWS_TOKEN = '47358925e949cb12aea0c5d456bfeee1';\r\nconst SEARCH_KEYWORD = 'corona';\r\nconst DEFAULT_COUNTRY = 'in';\r\nconst COOKIE_EXP_HOUR = 2;\r\nlet savedArticles = [];\r\n\r\nexport const fetchNews = async () => {\r\n  try {\r\n    if (getCookie('fetchedNews') == null || getCookie('fetchedNews') == '') {\r\n      let finalUrl = `${newUrl}?q=${SEARCH_KEYWORD}&token=${GNEWS_TOKEN}&country=${DEFAULT_COUNTRY}&image=required`;\r\n      const { data : { articles } } = await axios.get(finalUrl);\r\n      setCookie('fetchedNews', '1');\r\n      saveNewsDataInCookie(articles);\r\n      return articles;\r\n    } else {\r\n      const newsData = await getNewsDataFromCookie();\r\n      return newsData;\r\n    }\r\n  } catch (error) {\r\n\r\n  }\r\n}\r\nfunction getNewsDataFromCookie() {\r\n  let savedArticles = [];\r\n  let article = {};\r\n  for (let i = 0; i <= 9; i++) {\r\n    let newsData = JSON.parse(getCookie(`news_${i}`));\r\n    savedArticles.push({description: newsData[0], image: newsData[1], publishedAt: newsData[2], title: newsData[3], url: newsData[4]});\r\n  }\r\n  // download();\r\n  return savedArticles;\r\n}\r\n\r\nconst download = async () => {\r\n  const url = 'https://images.gnews.io/4c25bb24222846ec3d1b41191c810057';\r\n  const path = Path.resolve(__dirname, '../images/NewsCover', 'image.jpg');\r\n  const response = await axios({\r\n    method: 'GET',\r\n    url: url,\r\n    responseType: 'stream'\r\n  });\r\n  response.data.pipe(Fs.createWriteStream(path));\r\n  return new Promise((resolve, reject) => {\r\n    response.data.on('end', () => {\r\n      resolve();\r\n    })\r\n    response.data.on('err', (err) => {\r\n      reject(err);\r\n    })\r\n  })\r\n}\r\n\r\nfunction saveNewsDataInCookie(articles) {\r\n  let count = 0;\r\n  for (const{ description, image, publishedAt, title, url } of articles) {\r\n    setCookie(`news_${count}`, JSON.stringify([description.split(\" \").splice(0, 10).join(\" \"), image, publishedAt, title.split(\" \").splice(0, 5).join(\" \"), url]));\r\n    count++;\r\n  }\r\n}\r\n\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n  try {\r\n    const { data : { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {\r\n\r\n  }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n    const modifiedData = data.map((dailyData) => {\r\n      return {\r\n        confirmed: dailyData.confirmed.total,\r\n        deaths: dailyData.deaths.total,\r\n        date: dailyData.reportDate,\r\n      }\r\n    });\r\n    return modifiedData;\r\n  } catch (error) {\r\n\r\n  }\r\n}\r\n\r\nexport const countries = async () => {\r\n  try {\r\n    const { data : { countries } } = await axios.get(`${url}/countries`);\r\n    return countries.map(country => country.name);\r\n  } catch (error) {\r\n\r\n  }\r\n}\r\n\r\nconst setCookie = (cookie_name, cookie_value) => {\r\n    let date = new Date();\r\n    let expires;\r\n    date.setTime(date.getTime() + COOKIE_EXP_HOUR * 60 * 60 * 1000);\r\n    expires = \"; expires=\" + date.toUTCString();\r\n    document.cookie = cookie_name + '=' + cookie_value + expires + '; path=/';\r\n}\r\n\r\nconst getCookie = (name) => {\r\n    var dc = document.cookie;\r\n    var prefix = name + \"=\";\r\n    var begin = dc.indexOf(\"; \" + prefix);\r\n    if (begin == -1) {\r\n        begin = dc.indexOf(prefix);\r\n        if (begin != 0)\r\n            return null;\r\n    } else\r\n    {\r\n        begin += 2;\r\n        var end = document.cookie.indexOf(\";\", begin);\r\n        if (end == -1) {\r\n            end = dc.length;\r\n        }\r\n    }\r\n    return decodeURI(dc.substring(begin + prefix.length, end));\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__UfRDz\",\"card\":\"Cards_card__1Mm-6\",\"infected\":\"Cards_infected__GyXwq\",\"recovered\":\"Cards_recovered__1p2m0\",\"deaths\":\"Cards_deaths__RabEa\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid} from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  if (!confirmed) {\r\n    return 'Loading...';\r\n  }\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                duration={2.5}\r\n                end={confirmed.value}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of active cases of COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                duration={2.5}\r\n                end={recovered.value}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of recovered cases from COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                duration={2.5}\r\n                end={deaths.value}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of deaths caused by COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Cards;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\n\r\nconst Charts = ({ data : { confirmed, recovered, deaths }, country }) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    }\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const lineChart = (\r\n    dailyData.length ? (<Line\r\n      data={{\r\n          labels: dailyData.map(({ date }) => date),\r\n          datasets: [{\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true\r\n          }, {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n            fill: true\r\n          }],\r\n      }}\r\n    />) : null\r\n  );\r\n\r\n  const barChart = (\r\n    confirmed ? (\r\n      <Bar\r\n        data={{\r\n          labels: ['Infected', 'Recovered', 'Deaths'],\r\n          datasets: [{\r\n            label: 'People',\r\n            backgroundColor: [\r\n              'rgba(0, 0, 255, 0.5)',\r\n              'rgba(0, 255, 0, 0.5)',\r\n              'rgba(255, 0, 0, 0.5)',\r\n            ],\r\n            data:[confirmed.value, recovered.value, deaths.value]\r\n          }]\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: { display: false, text: `Current State in ${country}` }\r\n        }}\r\n        />\r\n    ) : null\r\n  );\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {country ? barChart : lineChart}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Charts;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport { countries } from '../../api';\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n  useEffect(() => {\r\n    const fetchCountries = async () => {\r\n      setFetchedCountries(await countries());\r\n    }\r\n    fetchCountries();\r\n  }, [setFetchedCountries]);\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n        <option value=\"\">Global</option>\r\n        {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  )\r\n}\r\n\r\nexport default CountryPicker;\r\n","import React, { Component, lazy, Suspense } from 'react';\r\nimport { Cards, Charts, CountryPicker } from './components';\r\nimport styles from './App.module.css';\r\nimport { fetchData } from './api';\r\nimport CoronaImage from './images/corona.png';\r\nconst News = lazy(() => import('./components/News/News'));\r\n\r\nclass App extends Component {\r\n  state = {\r\n    data: {},\r\n    country: ''\r\n  }\r\n\r\n  async componentDidMount() {\r\n    this.loadLazyScript();\r\n    const fetchedData = await fetchData();\r\n    this.setState({ data: fetchedData });\r\n  }\r\n\r\n  loadLazyScript() {\r\n    let script = document.createElement(\"script\");\r\n    script.async = true;\r\n    script.src = \"https://cdnjs.cloudflare.com/ajax/libs/lazysizes/4.1.8/lazysizes.min.js\";\r\n    document.body.appendChild(script);\r\n  }\r\n\r\n  handleCountryChange = async (country) => {\r\n     const fetchedCountryData = await fetchData(country);\r\n     this.setState({ data: fetchedCountryData, country: country });\r\n  }\r\n\r\n  render() {\r\n    const { data, country } = this.state;\r\n    if (typeof data == 'undefined') {\r\n      return 'Internet Disconnected...';\r\n    }\r\n    return (\r\n\r\n        <div className={styles.container}>\r\n          <img className={styles.image} src={CoronaImage} alt=\"COVID-19\"/>\r\n          <Cards data={data}/>\r\n          <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n          <Charts data={data} country={country}/>\r\n          <Suspense fallback={<div>cargando...</div>}>\r\n            <News />\r\n          </Suspense>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Newscontainer\":\"News_Newscontainer__2tRs_\",\"newsblock\":\"News_newsblock__1P30X\",\"newInlineBlock\":\"News_newInlineBlock__F7-zz\",\"publishDate\":\"News_publishDate__2jzQn\",\"centeralign\":\"News_centeralign__1XFHg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3WB30\",\"image\":\"App_image__3PdCG\"};","import React, { useState, useEffect } from 'react';\r\nimport { Card, CardActionArea, CardMedia, Typography, CardContent, makeStyles } from '@material-ui/core';\r\nimport { fetchNews } from '../../api';\r\nimport styles from './News.module.css';\r\nimport cx from 'classnames';\r\nimport Link from '@material-ui/core/Link';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n      maxWidth: 345,\r\n    },\r\n    media: {\r\n      height: 140,\r\n      width: '100%'\r\n    },\r\n});\r\n\r\nconst News = () => {\r\n  const [fetchedNewsData, setNewsData] = useState([]);\r\n  useEffect(() => {\r\n    const fetchNewsAPI = async () => {\r\n      setNewsData(await fetchNews());\r\n    };\r\n    fetchNewsAPI();\r\n  }, [setNewsData]);\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={styles.Newscontainer}>\r\n    <Typography gutterBottom variant=\"h5\" component=\"h1\" className={styles.centeralign}>\r\n    News For You\r\n    </Typography>\r\n    {fetchedNewsData.map((news, i) =>\r\n        (\r\n          <Link key={i} href={news.url} target=\"_blank\" rel=\"noopener\" color=\"inherit\" className={styles.newInlineBlock}>\r\n            <Card className={cx(classes.root, styles.newsblock)}>\r\n              <CardActionArea>\r\n                <img data-src={news.image == null ? \"\" : news.image} className={cx(classes.media, 'lazyload')} alt={news.title}/>\r\n                <CardContent>\r\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                    {news.title.split(\" \").splice(0, 5).join(\" \")}...\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                    {news.description.split(\" \").splice(0, 10).join(\" \")}...\r\n                  </Typography>\r\n                  <Typography color=\"textSecondary\" gutterBottom>\r\n                    {new Date(news.publishedAt).toDateString()}\r\n                  </Typography>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Link>\r\n        )\r\n      )\r\n    }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default News;\r\n\r\n// <CardMedia\r\n//   component=\"img\"\r\n//   className={classes.media}\r\n//   image={news.image == null ? \"\" : news.image}\r\n//   title={news.title}\r\n// />\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1Sicd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__3RgMm\"};","module.exports = __webpack_public_path__ + \"static/media/corona.d7265326.png\";"],"sourceRoot":""}